stages:
  - type: REPLACE
    from: USE_OLD_LAND_MOUNTAINS_RIVER
    to:
      - SELF: 3
      - OLD_LAND_MOUNTAINS_RIVER: 1
    
    variables: &variables
      riverValue: 1 # Value the sampler outputs where there should be a river.
      wetlandValue: -1 # Value the sampler outputs for areas bordering rivers, used for wetland biomes.
      notRiverValue: -1 # Value the sampler outputs for areas where there is not a river.
      
      riverFrequency: 1 / 10
      riverThreshold: 0.35 # Determines the area calculated as river, which also determines how far from rivers wetlands can be.
      riverMaxWidth: 10 * 1 # Determines the width of rivers within riverThreshold.
      wetlandThreshold: -1 # Determines how much area within riverThreshold will be wetlands.

    sampler: &sampler
      type: EXPRESSION
      expression: |
        if(y<64,
            if(|riverNoise((x+riverMaxWidth)*riverFrequency,(z+riverMaxWidth)*riverFrequency)|>riverThreshold,notRiverValue,
              if(riverKerneled(x/riverMaxWidth, z/riverMaxWidth)!=0,riverValue,if(wetlandMask(x*riverFrequency,z*riverFrequency)<wetlandThreshold,wetlandValue,notRiverValue))
            ),
        1)
      variables: *variables
      samplers:
        wetlandMask:
          dimensions: 2
          type: PROBABILITY
          sampler:
            type: DOMAIN_WARP
            amplitude: 2
            warp:
              type: OPEN_SIMPLEX_2
              salt: 9123
              frequency: 0.2
            sampler:
              type: OPEN_SIMPLEX_2
              salt: 4812
              frequency: 0.02
        riverNoise: &riverNoise
          dimensions: 2
          type: DOMAIN_WARP
          amplitude: 2
          sampler:
            type: OPEN_SIMPLEX_2
          warp:
            type: OPEN_SIMPLEX_2
            frequency: 0.14
        riverKerneled:
          dimensions: 2
          type: KERNEL # Edge detection
          .: [
            [ 0,  1, 0 ],
            [ 1, -4, 1 ],
            [ 0,  1, 0 ]
          ]
          sampler:
            type: EXPRESSION
            expression: riverNoise(x*riverMaxWidth*riverFrequency, z*riverMaxWidth*riverFrequency)>0
            variables: *variables
            samplers:
              riverNoise: *riverNoise


  - type: REPLACE
    from: USE_OLD_LAND_RIVER
    to:
      - SELF: 3
      - OLD_LAND_RIVER: 1
    sampler: *sampler

  - type: REPLACE
    from: USE_OLD_LAND_FROZEN_RIVER
    to:
      - SELF: 3
      - OLD_LAND_FROZEN_RIVER: 1
    sampler: *sampler


# AEROPELAGO
  - type: REPLACE
    from: USE_AEROPELAGO_RIVER
    to:
      - SELF: 3
      - AEROPELAGO_RIVER: 1
    sampler: *sampler

  - type: REPLACE
    from: USE_AEROPELAGO_RIVER2
    to:
      - SELF: 3
      - AEROPELAGO_RIVER2: 1
    sampler: *sampler

